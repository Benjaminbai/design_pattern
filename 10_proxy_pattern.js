// 代理模式：为其他对象提供一种代理以控制对这个对象的访问
// 代理模式把代理对象插入到访问者和目标对象之间，从而为访问者对目标对象的访问引入一定的间接性。正是这种间接性，给了代理对象很多操作空间，比如在调用目标对象前和调用后进行一些预操作和后操作，从而实现新的功能或者扩展目标的功能。
// 优点：
// 代理对象在访问者与目标对象之间可以起到 中介和保护目标对象 的作用；
// 代理对象可以扩展目标对象的功能；
// 代理模式能将访问者与目标对象分离，在一定程度上降低了系统的耦合度，如果我们希望适度扩展目标对象的一些功能，通过修改代理对象就可以了，符合开闭原则；

// 缺点：增加了系统的复杂度，要斟酌当前场景是不是真的需要引入代理模式（十八线明星就别请经纪人了）。

// 代理模式与适配器模式的区别：
// 适配器模式：主要用来解决接口之间不匹配的问题，通常是为所适配的对象提供一个不同的接口；
// 代理模式：提供访问目标对象的间接访问，以及对目标对象功能的扩展，一般提供和目标对象一样的接口；

// 正向代理
// 定义：

// 正向代理（Forward Proxy）是指客户端通过代理服务器来访问目标服务器，目标服务器不知道真正的客户端是谁，只知道请求来自于代理服务器。这种方式可以隐藏客户端的真实身份，使客户端能够访问一些原本无法直接访问的资源。

// 作用与优势：

// 访问受限资源：如Google、YouTube等，在某些地区或网络环境下被限制访问的资源。
// 缓存加速：代理服务器可以缓存常用资源，加快访问速度。
// 上网认证与授权：对客户端访问进行授权和认证，控制访问权限。
// 上网行为管理：记录用户访问记录，进行上网行为管理。
// 应用场景：

// 防火墙内的局域网客户端访问Internet。
// 跨国企业网络访问，通过正向代理绕过地域限制



// 反向代理
// 定义：

// 反向代理（Reverse Proxy）是指客户端通过代理服务器来访问目标服务器集群，客户端不知道真正的目标服务器是哪一个，只知道请求发送到了代理服务器。这种方式可以隐藏目标服务器的真实地址，实现负载均衡、安全防护等功能。

// 作用与优势：

// 内网安全：阻止外部Web攻击，保护内网安全。
// 负载均衡：通过反向代理服务器优化网站的负载，提高访问效率。
// SSL加速：将SSL加密工作交由配备了SSL硬件加速器的反向代理来完成，提高加密效率。
// 缓存服务：提供缓存服务，加速客户端访问。
// 数据压缩：统一压缩数据，节约带宽。
// 应用场景：

// 大型网站，如电商网站、社交媒体等，通过反向代理实现高可用性和负载均衡。
// 静态资源服务，如图片、视频等，通过反向代理缓存静态资源，减轻服务器压力。


// 区别与联系
// 区别：

// 服务对象：正向代理为客户端服务，反向代理为目标服务器服务。
// 隐藏对象：正向代理隐藏了真实的客户端地址，反向代理隐藏了真实的目标服务器地址。
// 位置：正向代理位于客户端和目标服务器之间，反向代理位于目标服务器集群之前。
// 联系：

// 功能：正向代理和反向代理都是进行请求和响应的转发。
// 结构：都需要一个或多个中间人（即proxy）来完成转发任务。
// 协议：都可以使用HTTP或HTTPS协议来进行通信。
// 总的来说，正向代理和反向代理在网络架构中扮演着不同的角色，具有各自独特的作用和优势。在实际应用中，可以根据具体需求选择合适的代理方式。